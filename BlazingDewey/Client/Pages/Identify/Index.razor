@page "/dewey/identifyareasindex"

@inject NavigationManager navManager

@using Syncfusion.Blazor.Kanban
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications  
@using Syncfusion.Blazor.Popups

<SfToast @ref="toastStandard" ID="toast_type">
    <ToastPosition X="Right" Y="Top"></ToastPosition>
</SfToast>
    <div id="IdentifyAreaHomeCard" style="background-color: white">
        <div class="container-fluid text-center">
            <div class="pt-3">
                @if (DeweyToDescription is true)
                {
                    <h5 class="text-secondary pt-3 pb-1">Match the Deweys to the Descriptions!</h5>
                    <label class="text-info pb-3">Hint: Move the kanban tasks to the correct column</label>
                    <SfKanban Width="100%" @ref="kanbanReference" TValue="KanbanModel" KeyField="Status" DataSource="PossibleAnswersDictionary.Values.OrderBy(x => RandomMode.Next()).ToList()" AllowDragAndDrop="true" ConstraintType="ConstraintType.Column">
                        <KanbanColumns>
                            @foreach (var item in columnDataDictionary.Values)
                            {
                                <KanbanColumn HeaderText="@item.HeaderText" MaxCount="@item.MaxCount" KeyField="@item.KeyField"></KanbanColumn>
                            }
                        </KanbanColumns>
                        <KanbanCardSettings HeaderField="Summary"></KanbanCardSettings>
                    </SfKanban>
                    <div class="mt-2 pr-3">
                        <SfButton CssClass="float-right" OnClick="(() => SubmitGame(true))">Submit</SfButton>
                    </div>
                    <SfDialog ShowCloseIcon="false" IsModal="true" Width="25%" @bind-Visible="GameWon">
                        <DialogTemplates>
                            <Header>Well Done!</Header>
                            <Content>
                                Do you want to play again? Game mode will be chosen at random...
                            </Content>
                        </DialogTemplates>
                        <DialogButtons>
                            <DialogButton Content="Yes" IsPrimary="true" OnClick="StartNewGame"></DialogButton>
                            <DialogButton Content="No" OnClick="ReturnBack"></DialogButton>
                        </DialogButtons>
                    </SfDialog>
                }
                else if (DeweyToDescription is false)
                {
                    <h5 class="text-secondary pt-3 pb-1">Match the Descriptions to the Deweys!</h5>
                    <label class="text-info pb-3">Hint: Move the kanban tasks to the correct column</label>
                    <SfKanban Width="100%" @ref="kanbanReference" TValue="KanbanModel" KeyField="Status" DataSource="PossibleAnswersDictionaryDescription.Values.OrderBy(x => RandomMode.Next()).ToList()" AllowDragAndDrop="true" ConstraintType="ConstraintType.Column">
                        <KanbanColumns>
                            @foreach (var item in columnDataDictionary.Values)
                            {
                                <KanbanColumn HeaderText="@item.HeaderText" MaxCount="@item.MaxCount" KeyField="@item.KeyField"></KanbanColumn>
                            }
                        </KanbanColumns>
                        <KanbanCardSettings HeaderField="Summary"></KanbanCardSettings>
                    </SfKanban>
                    <div class="mt-2 pr-3">
                        <SfButton CssClass="float-right" OnClick="(() => SubmitGame(false))">Submit</SfButton>
                    </div>
                    <SfDialog ShowCloseIcon="false" IsModal="true" Width="50%" @bind-Visible="GameWon">
                        <DialogTemplates>
                            <Header>Well Done!</Header>
                            <Content>
                                Do you want to play again? Game mode will be chosen at random...
                            </Content>
                        </DialogTemplates>
                        <DialogButtons>
                            <DialogButton Content="Yes" IsPrimary="true" OnClick="StartNewGame"></DialogButton>
                            <DialogButton Content="No" OnClick="ReturnBack"></DialogButton>
                        </DialogButtons>
                    </SfDialog>
                }
            </div>
        </div>
    </div>
<style>
    #IdentifyAreaHomeCard {
        min-height: 87vh;
        border-radius: 10px;
        box-shadow: 1px 1px 2px #808080;
        margin: 1vh;
    }
</style>

@code {

    //Region for declarations
    #region declarations
    const string numbers = "0123456789";

    public SfKanban<KanbanModel> kanbanReference;
    public SfToast toastStandard;

    //Boolean
    public bool DeweyToDescription { get; set; }
    public bool GameWon { get; set; } = false;

    //Random
    public Random RandomMode { get; set; } = new();


    //Dictionaries
    public Dictionary<string, ColumnModel> columnDataDictionary = new();
    public Dictionary<int, KanbanModel> PossibleAnswersDictionary { get; set; } = new();
    public Dictionary<string, KanbanModel> PossibleAnswersDictionaryDescription { get; set; } = new();

    //Dictionary full of the categories in the dewey system
    public Dictionary<int, string> Categories = new()
    {
        { 0, "General Knowledge" },
        { 1, "Philosophy and Psychology" },
        { 2, "Religion" },
        { 3, "Social Sciences" },
        { 4, "Languages"},
        { 5, "Science"},
        { 6, "Technology"},
        { 7, "Arts and Recreation"},
        { 8, "Literature" },
        { 9, "History and Geography"}
    };
    #endregion

    //Region for functions/methods
    #region functions

    protected override void OnInitialized()
    {
        GameWon = false;
        //Randomly chooses if it is matching deweys to descriptions or vice versa to promote replayability
        int modeChosen = RandomMode.Next(1, 3);
        columnDataDictionary.Clear();
        PossibleAnswersDictionary.Clear();
        PossibleAnswersDictionaryDescription.Clear();
        switch (modeChosen)
        {
            case 1:
                #region Dewey-Description
                DeweyToDescription = true;
                //Adding Columns
                int columnCount = 0;
                string randomColOne = RandomNumber(3);
                //ADDING THE DEWEY TOP LEVEL NUMBERS X4
                string trimmingFirstCol = randomColOne.Remove(1, 2);
                columnDataDictionary.Add(trimmingFirstCol, new ColumnModel { HeaderText = "Call Number: " + randomColOne, KeyField = new List<string>() { $"1" }, MaxCount = 1 });
                while (columnDataDictionary.Count < 4)
                {
                    string randomNumber = RandomNumber(3);
                    string checkFirstNumber = randomNumber.Remove(1, 2);

                    if (!columnDataDictionary.ContainsKey(checkFirstNumber))
                    {
                        columnDataDictionary.Add(checkFirstNumber, new ColumnModel { HeaderText = "Call Number: " + randomNumber, KeyField = new List<string>() { $"{columnCount + 2}" }, MaxCount = 1 });
                        columnCount++;
                    }
                }
                columnDataDictionary.Add("A", new ColumnModel { HeaderText = "Possible Answers", KeyField = new List<string>() { "A" } });

                //Adding answers: 4 of which have to be correct in correspondance with call numbers
                int foreachCount = 1;
                foreach (var item in columnDataDictionary.Keys)
                {
                    //Making sure theres atleast four correct answers in the dictionary
                    switch (item)
                    {
                        case "0":
                            PossibleAnswersDictionary.Add(0, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "General Knowledge" });
                            foreachCount++;
                            break;
                        case "1":
                            PossibleAnswersDictionary.Add(1, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Philosophy and Psychology" });
                            foreachCount++;
                            break;
                        case "2":
                            PossibleAnswersDictionary.Add(2, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Religion" });
                            foreachCount++;
                            break;
                        case "3":
                            PossibleAnswersDictionary.Add(3, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Social Sciences" });
                            foreachCount++;
                            break;
                        case "4":
                            PossibleAnswersDictionary.Add(4, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Languages" });
                            foreachCount++;
                            break;
                        case "5":
                            PossibleAnswersDictionary.Add(5, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Science" });
                            foreachCount++;
                            break;
                        case "6":
                            PossibleAnswersDictionary.Add(6, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Technology" });
                            foreachCount++;
                            break;
                        case "7":
                            PossibleAnswersDictionary.Add(7, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Arts and Recreation" });
                            foreachCount++;
                            break;
                        case "8":
                            PossibleAnswersDictionary.Add(8, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "Literature" });
                            foreachCount++;
                            break;
                        case "9":
                            PossibleAnswersDictionary.Add(9, new KanbanModel { Id = $"Task {foreachCount}", Status = "A", Summary = "History and Geography" });
                            foreachCount++;
                            break;
                        default:
                            break;
                    }
                }
                int count = 5;
                //Adding 3 random wrong answers to the dictionary
                while (PossibleAnswersDictionary.Count < 7)
                {
                    int randomCategory = RandomMode.Next(0, 10);
                    if (!PossibleAnswersDictionary.ContainsKey((int)randomCategory))
                    {
                        KeyValuePair<int, string> pair = Categories.ElementAt((int)randomCategory);
                        PossibleAnswersDictionary.Add(randomCategory, new KanbanModel { Id = $"Task {count}", Status = "A", Summary = pair.Value });
                        count++;
                    }
                }
                break;
            #endregion
            case 2:
                #region Description-Dewey
                DeweyToDescription = false;
                int columnCountDescription = 0;
                string randomColOneDescription = Categories[RandomMode.Next(1, 10)];
                //ADDING THE DESCRIPTIONS  X4
                columnDataDictionary.Add(randomColOneDescription, new ColumnModel { HeaderText = randomColOneDescription, KeyField = new List<string>() { $"1" }, MaxCount = 1 });
                while (columnDataDictionary.Count < 4)
                {
                    string randomDescription = Categories[RandomMode.Next(1, 10)];

                    if (!columnDataDictionary.ContainsKey(randomDescription))
                    {
                        columnDataDictionary.Add(randomDescription, new ColumnModel { HeaderText = randomDescription, KeyField = new List<string>() { $"{columnCountDescription + 2}" }, MaxCount = 1 });
                        columnCountDescription++;
                    }
                }
                columnDataDictionary.Add("A", new ColumnModel { HeaderText = "Possible Answers", KeyField = new List<string>() { "A" } });

                int foreachCountDescription = 1;
                //ADDING DEWEY TOP LEVEL NUMBERS THAT CORRESPOND TO THE DESCRIPTIONS
                foreach (var item in columnDataDictionary.Keys)
                {
                    switch (item)
                    {
                        case "General Knowledge":
                            PossibleAnswersDictionaryDescription.Add("General Knowledge", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "0" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Philosophy and Psychology":
                            PossibleAnswersDictionaryDescription.Add("Philosophy and Psychology", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "1" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Religion":
                            PossibleAnswersDictionaryDescription.Add("Religion", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "2" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Social Sciences":
                            PossibleAnswersDictionaryDescription.Add("Social Sciences", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "3" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Languages":
                            PossibleAnswersDictionaryDescription.Add("Languages", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "4" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Science":
                            PossibleAnswersDictionaryDescription.Add("Science", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "5" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Technology":
                            PossibleAnswersDictionaryDescription.Add("Technology", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "6" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Arts and Recreation":
                            PossibleAnswersDictionaryDescription.Add("Arts and Recreation", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "7" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "Literature":
                            PossibleAnswersDictionaryDescription.Add("Literature", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "8" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        case "History and Geography":
                            PossibleAnswersDictionaryDescription.Add("History and Geography", new KanbanModel { Id = $"Task {foreachCountDescription}", Status = "A", Summary = "9" + RandomNumber(2) });
                            foreachCountDescription++;
                            break;
                        default:
                            break;
                    }
                }
                //ADDING 3 RANDOM DEWEY TOP LEVEL NUMBERS SO THAT THERES FOUR CORRECT ANSWERS
                int countDescription = 5;
                while (PossibleAnswersDictionaryDescription.Count < 7)
                {
                    string randomDescription = Categories[RandomMode.Next(1, 10)];
                    if (!PossibleAnswersDictionaryDescription.ContainsKey(randomDescription))
                    {
                        var pair = Categories.FirstOrDefault(x => x.Value.Equals(randomDescription));
                        PossibleAnswersDictionaryDescription.Add(randomDescription, new KanbanModel { Id = $"Task {countDescription}", Status = "A", Summary = pair.Key + RandomNumber(2) });
                        countDescription++;
                    }
                }
                break;
                #endregion
        }
    }

    private async void SubmitGame(bool gameType)
    {
        List<bool> correctAnswers = new();
        List<KanbanModel> list = new();
        List<KanbanModel> listTwo = new();
        List<KanbanModel> listThree = new();
        List<KanbanModel> listFour = new();

        //Getting the answers for each column of the kanban
        //Game Type is true if it is dewey to description
        //False if it is description to dewey
        if (gameType is true)
        {
            list = kanbanReference.GetColumnData(new List<string>() { "1" }, PossibleAnswersDictionary.Values);
            listTwo = kanbanReference.GetColumnData(new List<string>() { "2" }, PossibleAnswersDictionary.Values);
            listThree = kanbanReference.GetColumnData(new List<string>() { "3" }, PossibleAnswersDictionary.Values);
            listFour = kanbanReference.GetColumnData(new List<string>() { "4" }, PossibleAnswersDictionary.Values);
        }
        else
        {
            list = kanbanReference.GetColumnData(new List<string>() { "1" }, PossibleAnswersDictionaryDescription.Values);
            listTwo = kanbanReference.GetColumnData(new List<string>() { "2" }, PossibleAnswersDictionaryDescription.Values);
            listThree = kanbanReference.GetColumnData(new List<string>() { "3" }, PossibleAnswersDictionaryDescription.Values);
            listFour = kanbanReference.GetColumnData(new List<string>() { "4" }, PossibleAnswersDictionaryDescription.Values);
        }

        //Validating inputs by user
        if (list.Count == 0 || listTwo.Count == 0 || listThree.Count == 0 || listFour.Count == 0)
        {
            await this.toastStandard.Show(new ToastModel { Title = $"Oh goodness!", Content = $"Looks like you forgot to add a description to a column!", CssClass = "e-toast-warning", Icon = "e-warning toast-icons", Timeout = 5000, ShowCloseButton = true });
        }
        else if (list.Count > 1 || listTwo.Count > 1 || listThree.Count > 1 || listFour.Count > 1)
        {
            await this.toastStandard.Show(new ToastModel { Title = $"Oh no!", Content = $"You cannot have more than one description in a column!", CssClass = "e-toast-warning", Icon = "e-warning toast-icons", Timeout = 5000, ShowCloseButton = true });
        }
        else
        {
            //Checking each column id is equal to the correct Task
            if (list[0].Id is "Task 1" && listTwo[0].Id is "Task 2" && listThree[0].Id is "Task 3" && listFour[0].Id is "Task 4")
            {
                correctAnswers.Add(true);
            }
            if (correctAnswers.Count is 1)
            {
                //Which means all answers have to had been correct
                if (gameType is true)
                {
                    await this.toastStandard.Show(new ToastModel { Title = $"Well Done!", Content = $"You ordered the deweys and descriptions correctly!", CssClass = "e-toast-success", Icon = "e-success toast-icons", Timeout = 5000, ShowCloseButton = true });
                }
                else
                {
                    await this.toastStandard.Show(new ToastModel { Title = $"Well Done!", Content = $"You ordered the descriptions and deweys correctly!", CssClass = "e-toast-success", Icon = "e-success toast-icons", Timeout = 5000, ShowCloseButton = true });
                }
                await Task.Delay(1000);
                GameWon = true;
                StateHasChanged();
            }
            else
            {
                await this.toastStandard.Show(new ToastModel { Title = $"Oops!", Content = $"Deweys dont match their descriptions. Keep trying!", CssClass = "e-toast-warning", Icon = "e-warning toast-icons", Timeout = 5000, ShowCloseButton = true });
            }
        }
    }

    //Starts a new game and alerts the user
    private async void StartNewGame()
    {
        await this.toastStandard.Show(new ToastModel { Title = $"Go Go Go!", Content = $"New Game has started!", CssClass = "e-toast-info", Icon = "e-info toast-icons", Timeout = 5000, ShowCloseButton = true });
        OnInitialized();
    }

    private void ReturnBack()
    {
        navManager.NavigateTo("");
    }

    //Generates random rumbers
    public string RandomNumber(int length)
    {
        return new string(Enumerable.Repeat(numbers, length).Select(s => s[RandomMode.Next(s.Length)]).ToArray());
    }
    #endregion
}
